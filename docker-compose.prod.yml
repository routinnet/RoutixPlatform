# ==========================================
# Routix Platform - Production Docker Compose
# ==========================================
# Production-ready configuration with security and performance optimizations

version: '3.8'

services:
  # PostgreSQL Database with pgvector
  postgres:
    image: ankane/pgvector:latest
    container_name: routix_postgres_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - routix_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: routix_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - routix_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Backend API
  backend:
    build:
      context: ./workspace/backend
      dockerfile: Dockerfile
    container_name: routix_backend_prod
    env_file:
      - .env.production
    ports:
      - "8000:8000"
    volumes:
      - backend_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - routix_network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
      replicas: 2

  # Celery Worker
  celery_worker:
    build:
      context: ./workspace/backend
      dockerfile: Dockerfile
    container_name: routix_celery_worker_prod
    command: celery -A app.workers.celery_app worker --loglevel=info --concurrency=8 --max-tasks-per-child=100
    env_file:
      - .env.production
    volumes:
      - backend_uploads:/app/uploads
    depends_on:
      - postgres
      - redis
      - backend
    restart: unless-stopped
    networks:
      - routix_network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
      replicas: 2

  # Celery Beat
  celery_beat:
    build:
      context: ./workspace/backend
      dockerfile: Dockerfile
    container_name: routix_celery_beat_prod
    command: celery -A app.workers.celery_app beat --loglevel=info
    env_file:
      - .env.production
    depends_on:
      - postgres
      - redis
      - backend
    restart: unless-stopped
    networks:
      - routix_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
      replicas: 1

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: routix_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - routix_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 512M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  routix_network:
    driver: bridge
