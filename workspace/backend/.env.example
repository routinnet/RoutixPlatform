# ==========================================
# Routix Platform Environment Configuration
# ==========================================
# This file contains all required environment variables for the Routix Platform.
# Copy this file to .env and fill in your actual values.
# DO NOT commit .env file to version control!

# ==========================================
# Application Settings
# ==========================================
PROJECT_NAME=Routix Platform
VERSION=1.0.0
ENVIRONMENT=development
DEBUG=false
API_V1_STR=/api/v1

# ==========================================
# Security Configuration
# ==========================================
# ⚠️ CRITICAL: Change SECRET_KEY to a long random string in production
# Generate with: openssl rand -hex 32
SECRET_KEY=your-secret-key-change-in-production-use-openssl-rand-hex-32
ACCESS_TOKEN_EXPIRE_MINUTES=11520
REFRESH_TOKEN_EXPIRE_DAYS=30

# ==========================================
# Database Configuration
# ==========================================
# For SQLite (Development):
DATABASE_URL=sqlite+aiosqlite:///./routix.db

# For PostgreSQL (Production - recommended):
# DATABASE_URL=postgresql+asyncpg://user:password@host:5432/routix_db

# For PostgreSQL with pgvector extension (Required for template matching):
# DATABASE_URL=postgresql+asyncpg://user:password@host:5432/routix_db?options=-c%20search_path=public

# ==========================================
# Redis Configuration
# ==========================================
# Used for caching, rate limiting, and WebSocket state
REDIS_URL=redis://localhost:6379/0

# For Redis with password:
# REDIS_URL=redis://:password@host:6379/0

# For Redis Cloud/Upstash:
# REDIS_URL=rediss://default:password@host:6379

# ==========================================
# AI Services Configuration
# ==========================================

# OpenAI API (Required for embeddings and GPT-4 Vision)
# Get your key from: https://platform.openai.com/api-keys
OPENAI_API_KEY=your-openai-api-key-here

# Google Gemini API (Required for Vision AI analysis)
# Get your key from: https://makersuite.google.com/app/apikey
GEMINI_API_KEY=your-gemini-api-key-here

# Midjourney API Services (Required for thumbnail generation)
# Choose one or both services for redundancy:

# GoAPI.ai (Primary Midjourney proxy)
# Get your key from: https://goapi.ai
GOAPI_API_KEY=your-goapi-key-here

# UseAPI.net (Fallback Midjourney proxy)
# Get your key from: https://useapi.net
USEAPI_API_KEY=your-useapi-key-here

# ==========================================
# Embedding Service Configuration
# ==========================================
# OpenAI embedding model for template similarity search
EMBEDDING_MODEL=text-embedding-3-small
EMBEDDING_DIMENSIONS=1536
EMBEDDING_CACHE_TTL=86400
EMBEDDING_BATCH_SIZE=100

# ==========================================
# Storage Configuration
# ==========================================

# Storage backend type: local, s3, cloudflare_r2
STORAGE_TYPE=local

# Local storage (development)
UPLOAD_DIR=./uploads
MAX_FILE_SIZE=10485760

# AWS S3 Configuration
# AWS_ACCESS_KEY_ID=your-access-key
# AWS_SECRET_ACCESS_KEY=your-secret-key
# AWS_REGION=us-east-1
# S3_BUCKET_NAME=routix-thumbnails

# Cloudflare R2 Configuration (Recommended for production)
# R2_ACCOUNT_ID=your-cloudflare-account-id
# R2_ACCESS_KEY_ID=your-r2-access-key
# R2_SECRET_ACCESS_KEY=your-r2-secret-key
# R2_BUCKET_NAME=routix-thumbnails
# R2_PUBLIC_URL=https://your-bucket.r2.dev

# ==========================================
# CORS & Networking
# ==========================================
# Comma-separated list of allowed origins
BACKEND_CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000

# For production, add your actual domains:
# BACKEND_CORS_ORIGINS=https://routix.com,https://app.routix.com,http://localhost:3000

# Allowed hosts for trusted host middleware
ALLOWED_HOSTS=*

# ==========================================
# Rate Limiting
# ==========================================
RATE_LIMIT_PER_MINUTE=60
RATE_LIMIT_PER_HOUR=1000

# ==========================================
# File Upload Settings
# ==========================================
ALLOWED_IMAGE_EXTENSIONS=.jpg,.jpeg,.png,.webp,.gif

# ==========================================
# Celery & Background Tasks
# ==========================================
# Celery broker (using Redis)
CELERY_BROKER_URL=redis://localhost:6379/1
CELERY_RESULT_BACKEND=redis://localhost:6379/2

# ==========================================
# Payment Integration (Optional)
# ==========================================
# Stripe API keys
# Get from: https://dashboard.stripe.com/apikeys
# STRIPE_PUBLISHABLE_KEY=pk_test_your-publishable-key
# STRIPE_SECRET_KEY=sk_test_your-secret-key
# STRIPE_WEBHOOK_SECRET=whsec_your-webhook-secret

# ==========================================
# Email Configuration (Optional)
# ==========================================
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USER=your-email@gmail.com
# SMTP_PASSWORD=your-app-password
# SMTP_TLS=true
# EMAILS_FROM_EMAIL=noreply@routix.dev
# EMAILS_FROM_NAME=Routix Platform

# ==========================================
# Monitoring & Logging (Optional)
# ==========================================
# Sentry DSN for error tracking
# SENTRY_DSN=your-sentry-dsn

# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# ==========================================
# WebSocket Configuration
# ==========================================
# WebSocket connection settings
WS_MESSAGE_QUEUE_SIZE=100
WS_HEARTBEAT_INTERVAL=30

# ==========================================
# Admin Panel Configuration
# ==========================================
# Initial admin user (created on first run)
ADMIN_EMAIL=admin@routix.dev
ADMIN_PASSWORD=change-me-in-production
ADMIN_USERNAME=admin

# ==========================================
# Development Settings
# ==========================================
# Enable SQL query logging (development only)
# SQL_ECHO=false

# Enable automatic database migrations
# AUTO_MIGRATE=false

# ==========================================
# Production Recommendations
# ==========================================
# For production deployment:
# 1. Use PostgreSQL with pgvector extension
# 2. Use Redis with persistence enabled
# 3. Use Cloudflare R2 or AWS S3 for storage
# 4. Enable HTTPS and update CORS origins
# 5. Set strong SECRET_KEY (32+ characters)
# 6. Configure proper rate limiting
# 7. Enable Sentry for error tracking
# 8. Use environment-specific .env files
# 9. Never commit .env to version control
# 10. Rotate API keys regularly
