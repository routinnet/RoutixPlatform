@startuml Routix Class Diagram

interface ITemplateService {
    +upload_template(file: UploadFile, metadata: TemplateMetadata): Template
    +analyze_template(template_id: UUID): TemplateAnalysis
    +search_templates(query: str, filters: Dict[str, Any]): List[Template]
    +get_template_performance(template_id: UUID): PerformanceMetrics
    +bulk_upload_templates(files: List[UploadFile], metadata: BulkMetadata): List[Template]
}

interface IGenerationService {
    +create_generation_request(user_id: UUID, prompt: str, algorithm_id: UUID): GenerationRequest
    +process_generation(request_id: UUID): GenerationResult
    +get_generation_status(request_id: UUID): GenerationStatus
    +update_progress(request_id: UUID, progress: int, status: str): None
    +retry_failed_generation(request_id: UUID): GenerationRequest
}

interface IChatService {
    +create_conversation(user_id: UUID): Conversation
    +send_message(conversation_id: UUID, message: MessageCreate): Message
    +get_conversation_history(conversation_id: UUID, limit: int): List[Message]
    +update_conversation_title(conversation_id: UUID, title: str): None
    +delete_conversation(conversation_id: UUID): None
}

interface IUserService {
    +create_user(user_data: UserCreate): User
    +authenticate_user(credentials: UserCredentials): AuthToken
    +update_credits(user_id: UUID, amount: int): User
    +get_user_usage(user_id: UUID): UsageStats
    +update_subscription(user_id: UUID, plan: str): Subscription
}

interface IAIService {
    +analyze_image(image_url: str): Dict[str, Any]
    +generate_embedding(text: str): List[float]
    +generate_thumbnail(prompt: str, style_ref: str, char_ref: str): str
    +health_check(): bool
}

class Template {
    +id: UUID
    +image_url: str
    +thumbnail_url: str
    +style_dna: Dict[str, Any]
    +embedding: List[float]
    +category: str
    +tags: List[str]
    +description: str
    +has_face: bool
    +has_text: bool
    +has_logo: bool
    +energy_level: int
    +performance_score: float
    +usage_count: int
    +success_rate: float
    +is_active: bool
    +is_featured: bool
    +priority: int
    +created_at: datetime
    +updated_at: datetime
    +created_by: UUID
    
    +calculate_similarity(other_embedding: List[float]): float
    +update_performance(success: bool, processing_time: float): None
    +to_dict(): Dict[str, Any]
}

class GenerationAlgorithm {
    +id: UUID
    +name: str
    +display_name: str
    +description: str
    +ai_provider: str
    +config: Dict[str, Any]
    +cost_per_generation: Decimal
    +credit_cost: int
    +is_active: bool
    +is_default: bool
    +performance_metrics: Dict[str, Any]
    +created_at: datetime
    +updated_at: datetime
    
    +validate_config(): bool
    +calculate_cost(user_tier: str): int
    +update_metrics(processing_time: float, success: bool): None
}

class GenerationRequest {
    +id: UUID
    +user_id: UUID
    +conversation_id: UUID
    +algorithm_id: UUID
    +prompt: str
    +enhanced_prompt: str
    +user_face_url: Optional[str]
    +user_logo_url: Optional[str]
    +custom_text: Optional[str]
    +status: GenerationStatus
    +progress: int
    +selected_template_id: Optional[UUID]
    +final_thumbnail_url: Optional[str]
    +processing_time: Optional[float]
    +cost_incurred: Decimal
    +error_message: Optional[str]
    +retry_count: int
    +created_at: datetime
    +completed_at: Optional[datetime]
    
    +update_status(status: GenerationStatus, progress: int): None
    +can_retry(): bool
    +calculate_total_cost(): Decimal
}

class User {
    +id: UUID
    +email: str
    +username: str
    +password_hash: str
    +credits: int
    +subscription_tier: str
    +stripe_customer_id: Optional[str]
    +is_active: bool
    +is_admin: bool
    +email_verified: bool
    +created_at: datetime
    +updated_at: datetime
    +last_login: Optional[datetime]
    
    +has_sufficient_credits(amount: int): bool
    +deduct_credits(amount: int): bool
    +add_credits(amount: int): None
    +get_tier_limits(): Dict[str, int]
    +is_premium(): bool
}

class Conversation {
    +id: UUID
    +user_id: UUID
    +title: str
    +message_count: int
    +created_at: datetime
    +updated_at: datetime
    +is_archived: bool
    
    +auto_generate_title(first_message: str): str
    +add_message(message: Message): None
    +get_latest_messages(limit: int): List[Message]
}

class Message {
    +id: UUID
    +conversation_id: UUID
    +role: MessageRole
    +type: MessageType
    +content: str
    +metadata: Dict[str, Any]
    +timestamp: datetime
    +is_edited: bool
    +edited_at: Optional[datetime]
    
    +format_for_display(): str
    +extract_generation_data(): Optional[Dict[str, Any]]
    +is_system_message(): bool
}

class UserAsset {
    +id: UUID
    +user_id: UUID
    +asset_type: AssetType
    +file_url: str
    +file_name: str
    +file_size: int
    +mime_type: str
    +is_active: bool
    +usage_count: int
    +created_at: datetime
    
    +get_signed_url(expiry: int): str
    +increment_usage(): None
    +validate_file_type(): bool
}

class Subscription {
    +id: UUID
    +user_id: UUID
    +plan_name: str
    +status: SubscriptionStatus
    +current_period_start: datetime
    +current_period_end: datetime
    +stripe_subscription_id: str
    +created_at: datetime
    +updated_at: datetime
    
    +is_active(): bool
    +days_remaining(): int
    +get_credit_allowance(): int
    +can_upgrade(): bool
}

class CreditTransaction {
    +id: UUID
    +user_id: UUID
    +generation_request_id: Optional[UUID]
    +transaction_type: TransactionType
    +amount: int
    +balance_after: int
    +description: str
    +created_at: datetime
    
    +is_debit(): bool
    +is_credit(): bool
    +format_description(): str
}

class AdminAuditLog {
    +id: UUID
    +admin_user_id: UUID
    +action: str
    +resource_type: str
    +resource_id: UUID
    +changes: Dict[str, Any]
    +ip_address: str
    +user_agent: str
    +created_at: datetime
    
    +format_changes(): str
    +get_action_summary(): str
}

enum GenerationStatus {
    PENDING
    ANALYZING
    SEARCHING
    COMPOSING
    GENERATING
    COMPLETED
    FAILED
    CANCELLED
}

enum MessageRole {
    USER
    ASSISTANT
    SYSTEM
}

enum MessageType {
    TEXT
    THUMBNAIL_RESULT
    PROGRESS_UPDATE
    ALGORITHM_SELECT
    FILE_UPLOAD
    SYSTEM_NOTIFICATION
}

enum AssetType {
    FACE_IMAGE
    LOGO_IMAGE
    CUSTOM_IMAGE
}

enum SubscriptionStatus {
    ACTIVE
    CANCELLED
    PAST_DUE
    UNPAID
    INCOMPLETE
}

enum TransactionType {
    PURCHASE
    GENERATION_COST
    REFUND
    BONUS
    SUBSCRIPTION_CREDIT
}

' Relationships
ITemplateService ..> Template
IGenerationService ..> GenerationRequest
IGenerationService ..> GenerationAlgorithm
IChatService ..> Conversation
IChatService ..> Message
IUserService ..> User
IUserService ..> Subscription

GenerationRequest --> User : belongs_to
GenerationRequest --> GenerationAlgorithm : uses
GenerationRequest --> Template : selected_template
GenerationRequest --> Conversation : part_of

Conversation --> User : belongs_to
Message --> Conversation : belongs_to

UserAsset --> User : belongs_to
Subscription --> User : belongs_to
CreditTransaction --> User : belongs_to
CreditTransaction --> GenerationRequest : related_to

AdminAuditLog --> User : performed_by

Template --> User : created_by

@enduml